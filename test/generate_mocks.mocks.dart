// Mocks generated by Mockito 5.4.5 from annotations
// in ember_trip_view/test/generate_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:ember_trip_view/models/quote.dart' as _i5;
import 'package:ember_trip_view/models/trip.dart' as _i2;
import 'package:ember_trip_view/repositories/quote_repository.dart' as _i3;
import 'package:ember_trip_view/repositories/trip_repository.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTrip_0 extends _i1.SmartFake implements _i2.Trip {
  _FakeTrip_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [QuoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuoteRepository extends _i1.Mock implements _i3.QuoteRepository {
  MockQuoteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Quote>> fetchQuotes() =>
      (super.noSuchMethod(
            Invocation.method(#fetchQuotes, []),
            returnValue: _i4.Future<List<_i5.Quote>>.value(<_i5.Quote>[]),
          )
          as _i4.Future<List<_i5.Quote>>);
}

/// A class which mocks [TripRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTripRepository extends _i1.Mock implements _i6.TripRepository {
  MockTripRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Trip> fetchTripInfo(String? tripUid) =>
      (super.noSuchMethod(
            Invocation.method(#fetchTripInfo, [tripUid]),
            returnValue: _i4.Future<_i2.Trip>.value(
              _FakeTrip_0(this, Invocation.method(#fetchTripInfo, [tripUid])),
            ),
          )
          as _i4.Future<_i2.Trip>);
}
